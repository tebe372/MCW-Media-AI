// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ContosoLearning.Web.Admin.VideoIndexer.Operations
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Net;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The Operations API contains all the Video Indexer APIs, such as Upload
    /// video, Get insights, and other operations
    /// </summary>
    public partial class OperationsClient : ServiceClient<OperationsClient>, IOperationsClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }        

        /// <summary>
        /// Subscription credentials which uniquely identify client subscription.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// Initializes a new instance of the OperationsClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected OperationsClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the OperationsClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected OperationsClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the OperationsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected OperationsClient(Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the OperationsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected OperationsClient(Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the OperationsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public OperationsClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the OperationsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public OperationsClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the OperationsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public OperationsClient(Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the OperationsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public OperationsClient(Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary> 
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.BaseUri = new Uri("https://api.videoindexer.ai");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Formatting.Indented,
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }    
        /// <summary>
        /// Get Accounts
        /// </summary>
        /// Get Accounts
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (User
        /// Read)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='generateAccessTokens'>
        /// Whether to generate an access token for each account. Possible values
        /// include: 'true', 'false'
        /// </param>
        /// <param name='allowEdit'>
        /// Whether the tokens have write permissions. Possible values include:
        /// 'true', 'false'
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> GetAccountsWithHttpMessagesAsync(string location, string accessToken, string generateAccessTokens = default(string), string allowEdit = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("generateAccessTokens", generateAccessTokens);
                tracingParameters.Add("allowEdit", allowEdit);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetAccounts", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (generateAccessTokens != null)
            {
                _queryParameters.Add(string.Format("generateAccessTokens={0}", Uri.EscapeDataString(generateAccessTokens)));
            }
            if (allowEdit != null)
            {
                _queryParameters.Add(string.Format("allowEdit={0}", Uri.EscapeDataString(allowEdit)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Account
        /// </summary>
        /// Get Account Details
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account
        /// Read)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='includeUsage'>
        /// Whether to retrieve the usage information for the account. Possible values
        /// include: 'true', 'false'
        /// </param>
        /// <param name='includeAmsInfo'>
        /// Whether to retrieve the Azure Media Services instance information.
        /// Possible values include: 'true', 'false'
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> GetAccountWithHttpMessagesAsync(string location, string accountId, string accessToken, string includeUsage = default(string), string includeAmsInfo = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("includeUsage", includeUsage);
                tracingParameters.Add("includeAmsInfo", includeAmsInfo);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetAccount", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (includeUsage != null)
            {
                _queryParameters.Add(string.Format("includeUsage={0}", Uri.EscapeDataString(includeUsage)));
            }
            if (includeAmsInfo != null)
            {
                _queryParameters.Add(string.Format("includeAmsInfo={0}", Uri.EscapeDataString(includeAmsInfo)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Video Index
        /// </summary>
        /// Get Video Index
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;
        /// . Possible values include: 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='videoId'>
        /// The video id
        /// </param>
        /// <param name='accessToken'>
        /// Required for private videos&lt;br&gt;
        /// Access token should match the authorization scope of the call (Account or
        /// Video, with Read)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='language'>
        /// The language of the captions.
        /// Supported languages: Afrikaans: Af-ZA, Arabic: ar-EG, Bangla: Bn-BD,
        /// Bosnian: Bs-Latn, Bulgarian: Bg-BG, Catalan: Ca-ES, Chinese (Simplified):
        /// zh-Hans, Chinese (Traditional): Zh-Hant, Croatian: Hr-HR, Czech: Cs-CZ,
        /// Danish: Da-DK, Dutch: Nl-NL, English: en-US, Estonian: Et-EE, Fijian:
        /// En-FJ, Filipino: fil-PH, Finnish: Fi-FI, French: fr-FR, German: de-DE,
        /// Greek: El-GR, Haitian: Fr-HT, Hebrew: He-IL, Hindi: Hi-IN, Hungarian:
        /// Hu-HU, Indonesian: Id-ID, Italian: it-IT, Japanese: ja-JP, Kiswahili:
        /// Sw-KE, Korean: Ko-KR, Latvian: Lv-LV, Lithuanian: Lt-LT, Malagasy: Mg-MG,
        /// Malay: Ms-MY, Maltese: Mt-MT, Norwegian: Nb-NO, Persian: Fa-IR, Polish:
        /// Pl-PL, Portuguese: pt-BR, Romanian: Ro-RO, Russian: ru-RU, Samoan: En-WS,
        /// Serbian (Cyrillic): Sr-Cyrl-RS, Serbian (Latin): Sr-Latn-RS, Slovak:
        /// Sk-SK, Slovenian: Sl-SI, Spanish: es-ES, Swedish: Sv-SE, Tamil: Ta-IN,
        /// Thai: Th-TH, Tongan: To-TO, Turkish: Tr-TR, Ukrainian: Uk-UA, Urdu:
        /// Ur-PK, Vietnamese: Vi-VN. Possible values include: 'English', 'Spanish',
        /// 'Russian', 'Japanese', 'German', 'French', 'Portuguese', 'Italian',
        /// 'Chinese', 'Filipino', 'Arabic', 'ar-EG', 'en-US', 'es-ES', 'fr-FR',
        /// 'de-DE', 'it-IT', 'ja-JP', 'pt-BR', 'ru-RU', 'zh-Hans', 'fil-PH',
        /// 'Af-ZA', 'Bn-BD', 'Bs-Latn', 'Bg-BG', 'Ca-ES', 'Hr-HR', 'Cs-CZ', 'Da-DK',
        /// 'Nl-NL', 'En-FJ', 'En-GB', 'En-WS', 'Es-MX', 'Et-EE', 'Fi-FI', 'El-GR',
        /// 'Fr-HT', 'He-IL', 'Hi-IN', 'Hu-HU', 'Id-ID', 'Sw-KE', 'Ko-KR', 'Lv-LV',
        /// 'Lt-LT', 'Mg-MG', 'Ms-MY', 'Mt-MT', 'Nb-NO', 'Fa-IR', 'Pl-PL', 'Ro-RO',
        /// 'Sr-Cyrl-RS', 'Sr-Latn-RS', 'Sk-SK', 'Sl-SI', 'Sv-SE', 'Ta-IN', 'Th-TH',
        /// 'To-TO', 'Tr-TR', 'Uk-UA', 'Ur-PK', 'Vi-VN', 'Zh-Hant'
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> GetVideoIndexWithHttpMessagesAsync(string location, string accountId, string videoId, string accessToken = default(string), string language = "English", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (videoId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "videoId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("videoId", videoId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("language", language);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetVideoIndex", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Videos/{videoId}/Index").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{videoId}", Uri.EscapeDataString(videoId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (language != null)
            {
                _queryParameters.Add(string.Format("language={0}", Uri.EscapeDataString(language)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// List Videos
        /// </summary>
        /// Get a list of videos in the account
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;
        /// . Possible values include: 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account
        /// with Read)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='pageSize'>
        /// page size
        /// </param>
        /// <param name='skip'>
        /// The number of pages to skip
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> ListVideosWithHttpMessagesAsync(string location, string accountId, string accessToken, int? pageSize = default(int?), int? skip = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("skip", skip);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "ListVideos", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Videos").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("pageSize={0}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, this.SerializationSettings).Trim('"'))));
            }
            if (skip != null)
            {
                _queryParameters.Add(string.Format("skip={0}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(skip, this.SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Upload Video
        /// </summary>
        /// Uploads the given video, starts indexing it and returns a new Video
        /// id.&lt;br&gt;
        /// The supported formats are listed
        /// &lt;a
        /// href=https://docs.microsoft.com/en-us/azure/media-services/media-services-media-encoder-standard-formats
        /// target="_blank"&gt; here&lt;/a&gt;
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;
        /// . Possible values include: 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account or
        /// Video with Write)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='name'>
        /// The video name
        /// </param>
        /// <param name='description'>
        /// The video description.
        /// </param>
        /// <param name='partition'>
        /// A partition to partition videos by (used for searching a specific
        /// partition)
        /// </param>
        /// <param name='externalId'>
        /// An external id to associate with the video (can be searched for later).
        /// </param>
        /// <param name='callbackUrl'>
        /// A url to notify when indexing is completed.
        /// It should be a POST url and VideoIndexer will add 2 additional query
        /// string parameters to it: id and state.
        /// 
        /// For example, if the callback url is
        /// 'https://test.com/notifyme?projectName=MyProject', the notification will
        /// be sent with additional parameters to
        /// 'https://test.com/notifyme?projectName=MyProject&amp;id=1234abcd&amp;state=Processed'.
        /// </param>
        /// <param name='metadata'>
        /// Metadata to associate with the video (will be returned in queries).
        /// </param>
        /// <param name='language'>
        /// The language of the video, to be used when generating the transcript.
        /// Arabic: ar-EG, Chinese (Simplified): zh-Hans, English: en-US, French:
        /// fr-FR, German: de-DE, Italian: it-IT, Japanese: ja-JP, Portuguese: pt-BR,
        /// Russian: ru-RU, Spanish: es-ES, Korean: ko-KR, Hindi: hi-IN or auto for
        /// auto-detection. Possible values include: 'English', 'Spanish', 'Russian',
        /// 'Japanese', 'German', 'French', 'Portuguese', 'Italian', 'Chinese',
        /// 'Filipino', 'Arabic', 'ar-EG', 'en-US', 'es-ES', 'fr-FR', 'de-DE',
        /// 'it-IT', 'ja-JP', 'pt-BR', 'ru-RU', 'zh-Hans', 'fil-PH', 'Af-ZA',
        /// 'Bn-BD', 'Bs-Latn', 'Bg-BG', 'Ca-ES', 'Hr-HR', 'Cs-CZ', 'Da-DK', 'Nl-NL',
        /// 'En-FJ', 'En-GB', 'En-WS', 'Es-MX', 'Et-EE', 'Fi-FI', 'El-GR', 'Fr-HT',
        /// 'He-IL', 'Hi-IN', 'Hu-HU', 'Id-ID', 'Sw-KE', 'Ko-KR', 'Lv-LV', 'Lt-LT',
        /// 'Mg-MG', 'Ms-MY', 'Mt-MT', 'Nb-NO', 'Fa-IR', 'Pl-PL', 'Ro-RO',
        /// 'Sr-Cyrl-RS', 'Sr-Latn-RS', 'Sk-SK', 'Sl-SI', 'Sv-SE', 'Ta-IN', 'Th-TH',
        /// 'To-TO', 'Tr-TR', 'Uk-UA', 'Ur-PK', 'Vi-VN', 'Zh-Hant', 'auto'
        /// </param>
        /// <param name='videoUrl'>
        /// A public url of the video/audio file (url encoded). If not specified, the
        /// file should be passed as a multipart/form body content.
        /// </param>
        /// <param name='fileName'>
        /// The uploaded file name.
        /// </param>
        /// <param name='indexingPreset'>
        /// The indexing preset to use
        /// (Default/AudioOnly/VideoOnly/DefaultWithNoiseReduction). Possible values
        /// include: 'Default', 'AudioOnly', 'VideoOnly', 'DefaultWithNoiseReduction'
        /// </param>
        /// <param name='streamingPreset'>
        /// The streaming preset to use
        /// (Default/SingleBitrate/AdaptiveBitrate/NoStreaming). Possible values
        /// include: 'Default', 'AdaptiveBitrate', 'NoStreaming', 'SingleBitrate'
        /// </param>
        /// <param name='linguisticModelId'>
        /// Linguistic model id as received by 'create linguistic model' call
        /// </param>
        /// <param name='privacy'>
        /// The video privacy (Private or Public). Possible values include: 'Private',
        /// 'Public'
        /// </param>
        /// <param name='externalUrl'>
        /// An external URL to associate with the video (can be retrieved later)
        /// </param>
        /// <param name='assetId'>
        /// Azure media services asset id. Used to index from existing assets in your
        /// connected Azure media services account. (Paid only)
        /// </param>
        /// <param name='priority'>
        /// Index priority (Low, Normal and High). Can be used in paid regions only.
        /// Possible values include: 'Low', 'Normal', 'High'
        /// </param>
        /// <param name='personModelId'>
        /// Faces will be identified against the provided person model.
        /// </param>
        /// <param name='brandsCategories'>
        /// List of brands categories delimited by comma. Video indexer will only take
        /// these categories in to account when indexing. If not specified all brands
        /// will be used.
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> UploadVideoWithHttpMessagesAsync(string location, string accountId, string accessToken, string name, string description = default(string), string partition = default(string), string externalId = default(string), string callbackUrl = default(string), string metadata = default(string), string language = default(string), string videoUrl = default(string), string fileName = default(string), string indexingPreset = default(string), string streamingPreset = "Default", string linguisticModelId = default(string), string privacy = default(string), string externalUrl = default(string), string assetId = default(string), string priority = default(string), string personModelId = default(string), string brandsCategories = default(string), object body = default(object), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            if (name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "name");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("name", name);
                tracingParameters.Add("description", description);
                tracingParameters.Add("partition", partition);
                tracingParameters.Add("externalId", externalId);
                tracingParameters.Add("callbackUrl", callbackUrl);
                tracingParameters.Add("metadata", metadata);
                tracingParameters.Add("language", language);
                tracingParameters.Add("videoUrl", videoUrl);
                tracingParameters.Add("fileName", fileName);
                tracingParameters.Add("indexingPreset", indexingPreset);
                tracingParameters.Add("streamingPreset", streamingPreset);
                tracingParameters.Add("linguisticModelId", linguisticModelId);
                tracingParameters.Add("privacy", privacy);
                tracingParameters.Add("externalUrl", externalUrl);
                tracingParameters.Add("assetId", assetId);
                tracingParameters.Add("priority", priority);
                tracingParameters.Add("personModelId", personModelId);
                tracingParameters.Add("brandsCategories", brandsCategories);
                tracingParameters.Add("body", body);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "UploadVideo", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Videos").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (name != null)
            {
                _queryParameters.Add(string.Format("name={0}", Uri.EscapeDataString(name)));
            }
            if (description != null)
            {
                _queryParameters.Add(string.Format("description={0}", Uri.EscapeDataString(description)));
            }
            if (partition != null)
            {
                _queryParameters.Add(string.Format("partition={0}", Uri.EscapeDataString(partition)));
            }
            if (externalId != null)
            {
                _queryParameters.Add(string.Format("externalId={0}", Uri.EscapeDataString(externalId)));
            }
            if (callbackUrl != null)
            {
                _queryParameters.Add(string.Format("callbackUrl={0}", Uri.EscapeDataString(callbackUrl)));
            }
            if (metadata != null)
            {
                _queryParameters.Add(string.Format("metadata={0}", Uri.EscapeDataString(metadata)));
            }
            if (language != null)
            {
                _queryParameters.Add(string.Format("language={0}", Uri.EscapeDataString(language)));
            }
            if (videoUrl != null)
            {
                _queryParameters.Add(string.Format("videoUrl={0}", Uri.EscapeDataString(videoUrl)));
            }
            if (fileName != null)
            {
                _queryParameters.Add(string.Format("fileName={0}", Uri.EscapeDataString(fileName)));
            }
            if (indexingPreset != null)
            {
                _queryParameters.Add(string.Format("indexingPreset={0}", Uri.EscapeDataString(indexingPreset)));
            }
            if (streamingPreset != null)
            {
                _queryParameters.Add(string.Format("streamingPreset={0}", Uri.EscapeDataString(streamingPreset)));
            }
            if (linguisticModelId != null)
            {
                _queryParameters.Add(string.Format("linguisticModelId={0}", Uri.EscapeDataString(linguisticModelId)));
            }
            if (privacy != null)
            {
                _queryParameters.Add(string.Format("privacy={0}", Uri.EscapeDataString(privacy)));
            }
            if (externalUrl != null)
            {
                _queryParameters.Add(string.Format("externalUrl={0}", Uri.EscapeDataString(externalUrl)));
            }
            if (assetId != null)
            {
                _queryParameters.Add(string.Format("assetId={0}", Uri.EscapeDataString(assetId)));
            }
            if (priority != null)
            {
                _queryParameters.Add(string.Format("priority={0}", Uri.EscapeDataString(priority)));
            }
            if (personModelId != null)
            {
                _queryParameters.Add(string.Format("personModelId={0}", Uri.EscapeDataString(personModelId)));
            }
            if (brandsCategories != null)
            {
                _queryParameters.Add(string.Format("brandsCategories={0}", Uri.EscapeDataString(brandsCategories)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, this.SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("multipart/form-data");
            }
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Search Videos
        /// </summary>
        /// Search videos in the specified account
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='query'>
        /// Free text to search for.
        /// </param>
        /// <param name='textScope'>
        /// The text scope to search in. Possible values include: 'Transcript', 'Ocr'
        /// </param>
        /// <param name='privacy'>
        /// A privacy level (Private, Organization, Public). Possible values include:
        /// 'Private', 'Public'
        /// </param>
        /// <param name='id'>
        /// A breakdown id to search for.
        /// </param>
        /// <param name='partition'>
        /// A partition to search for.
        /// </param>
        /// <param name='owner'>
        /// An owner to search for.
        /// </param>
        /// <param name='face'>
        /// A face to search for.
        /// </param>
        /// <param name='externalId'>
        /// An external id to search for (which was associated with the video at
        /// upload).
        /// </param>
        /// <param name='pageSize'>
        /// The number of results to return.
        /// </param>
        /// <param name='skip'>
        /// The number of results to skip (used for paging).
        /// </param>
        /// <param name='sourceLanguage'>
        /// Include only videos with that source language. You can specify multiple
        /// language parameters (e.g. $language=English&amp;language=French) to
        /// search multiple languages. Having no language parameter will search all
        /// languages.
        /// Supported languages: Afrikaans: Af-ZA, Arabic: ar-EG, Bangla: Bn-BD,
        /// Bosnian: Bs-Latn, Bulgarian: Bg-BG, Catalan: Ca-ES, Chinese (Simplified):
        /// zh-Hans, Chinese (Traditional): Zh-Hant, Croatian: Hr-HR, Czech: Cs-CZ,
        /// Danish: Da-DK, Dutch: Nl-NL, English: en-US, Estonian: Et-EE, Fijian:
        /// En-FJ, Filipino: fil-PH, Finnish: Fi-FI, French: fr-FR, German: de-DE,
        /// Greek: El-GR, Haitian: Fr-HT, Hebrew: He-IL, Hindi: Hi-IN, Hungarian:
        /// Hu-HU, Indonesian: Id-ID, Italian: it-IT, Japanese: ja-JP, Kiswahili:
        /// Sw-KE, Korean: Ko-KR, Latvian: Lv-LV, Lithuanian: Lt-LT, Malagasy: Mg-MG,
        /// Malay: Ms-MY, Maltese: Mt-MT, Norwegian: Nb-NO, Persian: Fa-IR, Polish:
        /// Pl-PL, Portuguese: pt-BR, Romanian: Ro-RO, Russian: ru-RU, Samoan: En-WS,
        /// Serbian (Cyrillic): Sr-Cyrl-RS, Serbian (Latin): Sr-Latn-RS, Slovak:
        /// Sk-SK, Slovenian: Sl-SI, Spanish: es-ES, Swedish: Sv-SE, Tamil: Ta-IN,
        /// Thai: Th-TH, Tongan: To-TO, Turkish: Tr-TR, Ukrainian: Uk-UA, Urdu:
        /// Ur-PK, Vietnamese: Vi-VN. Possible values include: 'English', 'Spanish',
        /// 'Russian', 'Japanese', 'German', 'French', 'Portuguese', 'Italian',
        /// 'Chinese', 'Filipino', 'Arabic', 'ar-EG', 'en-US', 'es-ES', 'fr-FR',
        /// 'de-DE', 'it-IT', 'ja-JP', 'pt-BR', 'ru-RU', 'zh-Hans', 'fil-PH',
        /// 'Af-ZA', 'Bn-BD', 'Bs-Latn', 'Bg-BG', 'Ca-ES', 'Hr-HR', 'Cs-CZ', 'Da-DK',
        /// 'Nl-NL', 'En-FJ', 'En-WS', 'Et-EE', 'Fi-FI', 'El-GR', 'Fr-HT', 'He-IL',
        /// 'Hi-IN', 'Hu-HU', 'Id-ID', 'Sw-KE', 'Ko-KR', 'Lv-LV', 'Lt-LT', 'Mg-MG',
        /// 'Ms-MY', 'Mt-MT', 'Nb-NO', 'Fa-IR', 'Pl-PL', 'Ro-RO', 'Sr-Cyrl-RS',
        /// 'Sr-Latn-RS', 'Sk-SK', 'Sl-SI', 'Sv-SE', 'Ta-IN', 'Th-TH', 'To-TO',
        /// 'Tr-TR', 'Uk-UA', 'Ur-PK', 'Vi-VN', 'Zh-Hant'
        /// </param>
        /// <param name='language'>
        /// The language to search in. You can specify multiple language parameters
        /// (e.g. $language=English&amp;language=French) to search multiple
        /// languages. Having no language parameter will search all languages.
        /// Supported languages: Afrikaans: Af-ZA, Arabic: ar-EG, Bangla: Bn-BD,
        /// Bosnian: Bs-Latn, Bulgarian: Bg-BG, Catalan: Ca-ES, Chinese (Simplified):
        /// zh-Hans, Chinese (Traditional): Zh-Hant, Croatian: Hr-HR, Czech: Cs-CZ,
        /// Danish: Da-DK, Dutch: Nl-NL, English: en-US, Estonian: Et-EE, Fijian:
        /// En-FJ, Filipino: fil-PH, Finnish: Fi-FI, French: fr-FR, German: de-DE,
        /// Greek: El-GR, Haitian: Fr-HT, Hebrew: He-IL, Hindi: Hi-IN, Hungarian:
        /// Hu-HU, Indonesian: Id-ID, Italian: it-IT, Japanese: ja-JP, Kiswahili:
        /// Sw-KE, Korean: Ko-KR, Latvian: Lv-LV, Lithuanian: Lt-LT, Malagasy: Mg-MG,
        /// Malay: Ms-MY, Maltese: Mt-MT, Norwegian: Nb-NO, Persian: Fa-IR, Polish:
        /// Pl-PL, Portuguese: pt-BR, Romanian: Ro-RO, Russian: ru-RU, Samoan: En-WS,
        /// Serbian (Cyrillic): Sr-Cyrl-RS, Serbian (Latin): Sr-Latn-RS, Slovak:
        /// Sk-SK, Slovenian: Sl-SI, Spanish: es-ES, Swedish: Sv-SE, Tamil: Ta-IN,
        /// Thai: Th-TH, Tongan: To-TO, Turkish: Tr-TR, Ukrainian: Uk-UA, Urdu:
        /// Ur-PK, Vietnamese: Vi-VN. Possible values include: 'English', 'Spanish',
        /// 'Russian', 'Japanese', 'German', 'French', 'Portuguese', 'Italian',
        /// 'Chinese', 'Filipino', 'Arabic', 'ar-EG', 'en-US', 'es-ES', 'fr-FR',
        /// 'de-DE', 'it-IT', 'ja-JP', 'pt-BR', 'ru-RU', 'zh-Hans', 'fil-PH',
        /// 'Af-ZA', 'Bn-BD', 'Bs-Latn', 'Bg-BG', 'Ca-ES', 'Hr-HR', 'Cs-CZ', 'Da-DK',
        /// 'Nl-NL', 'En-FJ', 'En-GB', 'En-WS', 'Es-MX', 'Et-EE', 'Fi-FI', 'El-GR',
        /// 'Fr-HT', 'He-IL', 'Hi-IN', 'Hu-HU', 'Id-ID', 'Sw-KE', 'Ko-KR', 'Lv-LV',
        /// 'Lt-LT', 'Mg-MG', 'Ms-MY', 'Mt-MT', 'Nb-NO', 'Fa-IR', 'Pl-PL', 'Ro-RO',
        /// 'Sr-Cyrl-RS', 'Sr-Latn-RS', 'Sk-SK', 'Sl-SI', 'Sv-SE', 'Ta-IN', 'Th-TH',
        /// 'To-TO', 'Tr-TR', 'Uk-UA', 'Ur-PK', 'Vi-VN', 'Zh-Hant'
        /// </param>
        /// <param name='accessToken'>
        /// Required for private videos or account scope search&lt;br&gt;
        /// Access token should match the authorization scope of the call - A video
        /// token (for a single video search) or account token with read
        /// permissions&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> SearchVideosWithHttpMessagesAsync(string location, string accountId, string query = default(string), string textScope = default(string), string privacy = default(string), string id = default(string), string partition = default(string), string owner = default(string), string face = default(string), string externalId = default(string), int? pageSize = default(int?), int? skip = default(int?), string sourceLanguage = "English", string language = "English", string accessToken = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("query", query);
                tracingParameters.Add("textScope", textScope);
                tracingParameters.Add("privacy", privacy);
                tracingParameters.Add("id", id);
                tracingParameters.Add("partition", partition);
                tracingParameters.Add("owner", owner);
                tracingParameters.Add("face", face);
                tracingParameters.Add("externalId", externalId);
                tracingParameters.Add("pageSize", pageSize);
                tracingParameters.Add("skip", skip);
                tracingParameters.Add("sourceLanguage", sourceLanguage);
                tracingParameters.Add("language", language);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "SearchVideos", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Videos/Search").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            List<string> _queryParameters = new List<string>();
            if (query != null)
            {
                _queryParameters.Add(string.Format("query={0}", Uri.EscapeDataString(query)));
            }
            if (textScope != null)
            {
                _queryParameters.Add(string.Format("textScope={0}", Uri.EscapeDataString(textScope)));
            }
            if (privacy != null)
            {
                _queryParameters.Add(string.Format("privacy={0}", Uri.EscapeDataString(privacy)));
            }
            if (id != null)
            {
                _queryParameters.Add(string.Format("id={0}", Uri.EscapeDataString(id)));
            }
            if (partition != null)
            {
                _queryParameters.Add(string.Format("partition={0}", Uri.EscapeDataString(partition)));
            }
            if (owner != null)
            {
                _queryParameters.Add(string.Format("owner={0}", Uri.EscapeDataString(owner)));
            }
            if (face != null)
            {
                _queryParameters.Add(string.Format("face={0}", Uri.EscapeDataString(face)));
            }
            if (externalId != null)
            {
                _queryParameters.Add(string.Format("externalId={0}", Uri.EscapeDataString(externalId)));
            }
            if (pageSize != null)
            {
                _queryParameters.Add(string.Format("pageSize={0}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(pageSize, this.SerializationSettings).Trim('"'))));
            }
            if (skip != null)
            {
                _queryParameters.Add(string.Format("skip={0}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(skip, this.SerializationSettings).Trim('"'))));
            }
            if (sourceLanguage != null)
            {
                _queryParameters.Add(string.Format("sourceLanguage={0}", Uri.EscapeDataString(sourceLanguage)));
            }
            if (language != null)
            {
                _queryParameters.Add(string.Format("language={0}", Uri.EscapeDataString(language)));
            }
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Delete Video
        /// </summary>
        /// Deletes the specified video and all related insights created from when the
        /// video was indexed
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='videoId'>
        /// The id of the video to delete
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Video or
        /// Account, with Write)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> DeleteVideoWithHttpMessagesAsync(string location, string accountId, string videoId, string accessToken, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (videoId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "videoId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("videoId", videoId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "DeleteVideo", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Videos/{videoId}").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{videoId}", Uri.EscapeDataString(videoId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("DELETE");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 204 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 404 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Re-Index Video
        /// </summary>
        /// Re-index video
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;
        /// . Possible values include: 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='videoId'>
        /// The video id
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account or
        /// Video, with Write)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='indexingPreset'>
        /// Indexing presets:
        /// NoiseReduction - Will run an additional step of noise reduction.
        /// Audio Only - get insights from audio only.
        /// Video Only - get insights from video only.
        /// Default - Use no preset (similar to not populating the parameter).
        /// Possible values include: 'Default', 'AudioOnly', 'VideoOnly',
        /// 'DefaultWithNoiseReduction'
        /// </param>
        /// <param name='streamingPreset'>
        /// Streaming presets:
        /// Default - Single layer (similar to not sending the parameter)
        /// AdaptiveBitrate - Multiple layers based on media's framerate
        /// SingleBitrate - Single layer
        /// . Possible values include: 'Default', 'AdaptiveBitrate', 'NoStreaming',
        /// 'SingleBitrate'
        /// </param>
        /// <param name='callbackUrl'>
        /// The callback uri to call with the status once the operation completes
        /// </param>
        /// <param name='sourceLanguage'>
        /// The language to set set as the source language of the video, to be used
        /// when generating the transcript. Arabic: ar-EG, Chinese (Simplified):
        /// zh-Hans, English: en-US, French: fr-FR, German: de-DE, Italian: it-IT,
        /// Japanese: ja-JP, Portuguese: pt-BR, Russian: ru-RU, Spanish: es-ES,
        /// Korean: ko-KR, Hindi: hi-IN or Auto (automatic language detection).
        /// Possible values include: 'auto', 'English', 'Spanish', 'Russian',
        /// 'Japanese', 'German', 'French', 'Portuguese', 'Italian', 'Chinese',
        /// 'Arabic', 'ar-EG', 'en-US', 'es-ES', 'ru-RU', 'ja-JP', 'de-DE', 'fr-FR',
        /// 'pt-BR', 'it-IT', 'zh-CN', 'hi-IN', 'ko-KR'
        /// </param>
        /// <param name='languageModelId'>
        /// LanguageModelId as appears in the LanguageModel returned by Language
        /// customization APIs
        /// </param>
        /// <param name='priority'>
        /// Index priority (Low, Normal and High). Can be used in paid regions only.
        /// Possible values include: 'Low', 'Normal', 'High'
        /// </param>
        /// <param name='personModelId'>
        /// Faces will be identified against the provided person model.
        /// </param>
        /// <param name='brandsCategories'>
        /// List of brands categories delimited by comma. Video indexer will only take
        /// these categories in to account when indexing. If not specified all brands
        /// will be used.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> ReIndexVideoWithHttpMessagesAsync(string location, string accountId, string videoId, string accessToken, string indexingPreset = default(string), string streamingPreset = default(string), string callbackUrl = default(string), string sourceLanguage = default(string), string languageModelId = default(string), string priority = default(string), string personModelId = default(string), string brandsCategories = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (videoId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "videoId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("videoId", videoId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("indexingPreset", indexingPreset);
                tracingParameters.Add("streamingPreset", streamingPreset);
                tracingParameters.Add("callbackUrl", callbackUrl);
                tracingParameters.Add("sourceLanguage", sourceLanguage);
                tracingParameters.Add("languageModelId", languageModelId);
                tracingParameters.Add("priority", priority);
                tracingParameters.Add("personModelId", personModelId);
                tracingParameters.Add("brandsCategories", brandsCategories);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "ReIndexVideo", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Videos/{videoId}/ReIndex").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{videoId}", Uri.EscapeDataString(videoId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (indexingPreset != null)
            {
                _queryParameters.Add(string.Format("indexingPreset={0}", Uri.EscapeDataString(indexingPreset)));
            }
            if (streamingPreset != null)
            {
                _queryParameters.Add(string.Format("streamingPreset={0}", Uri.EscapeDataString(streamingPreset)));
            }
            if (callbackUrl != null)
            {
                _queryParameters.Add(string.Format("callbackUrl={0}", Uri.EscapeDataString(callbackUrl)));
            }
            if (sourceLanguage != null)
            {
                _queryParameters.Add(string.Format("sourceLanguage={0}", Uri.EscapeDataString(sourceLanguage)));
            }
            if (languageModelId != null)
            {
                _queryParameters.Add(string.Format("languageModelId={0}", Uri.EscapeDataString(languageModelId)));
            }
            if (priority != null)
            {
                _queryParameters.Add(string.Format("priority={0}", Uri.EscapeDataString(priority)));
            }
            if (personModelId != null)
            {
                _queryParameters.Add(string.Format("personModelId={0}", Uri.EscapeDataString(personModelId)));
            }
            if (brandsCategories != null)
            {
                _queryParameters.Add(string.Format("brandsCategories={0}", Uri.EscapeDataString(brandsCategories)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 204 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Update Face
        /// </summary>
        /// Update face
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;
        /// . Possible values include: 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='videoId'>
        /// The video id
        /// </param>
        /// <param name='faceId'>
        /// The face id
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account or
        /// Video, with Write)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='newName'>
        /// A name for the face
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> UpdateFaceWithHttpMessagesAsync(string location, string accountId, string videoId, int faceId, string accessToken, string newName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (videoId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "videoId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            if (newName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "newName");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("videoId", videoId);
                tracingParameters.Add("faceId", faceId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("newName", newName);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "UpdateFace", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Videos/{videoId}/Index/Faces/{faceId}").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{videoId}", Uri.EscapeDataString(videoId));
            _url = _url.Replace("{faceId}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(faceId, this.SerializationSettings).Trim('"')));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (newName != null)
            {
                _queryParameters.Add(string.Format("newName={0}", Uri.EscapeDataString(newName)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 204 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Update Transcript
        /// </summary>
        /// Updates the video with the given transcript.
        /// If the specified language is the source language of the video, then the
        /// video will be re-indexed with the given transcript, and the transcript of
        /// all the other languages will be re-generated.
        /// If the specified language is not the source language, the transcript of
        /// that language will be updated and the new text will be written into the
        /// existing lines and blocks of that language.
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;
        /// . Possible values include: 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='videoId'>
        /// The video id
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account or
        /// Video, with Write)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='language'>
        /// The language to search in. You can specify multiple language parameters
        /// (e.g. $language=English&amp;language=French) to search multiple
        /// languages. Having no language parameter will search all languages.
        /// Supported languages: Afrikaans: Af-ZA, Arabic: ar-EG, Bangla: Bn-BD,
        /// Bosnian: Bs-Latn, Bulgarian: Bg-BG, Catalan: Ca-ES, Chinese (Simplified):
        /// zh-Hans, Chinese (Traditional): Zh-Hant, Croatian: Hr-HR, Czech: Cs-CZ,
        /// Danish: Da-DK, Dutch: Nl-NL, English: en-US, Estonian: Et-EE, Fijian:
        /// En-FJ, Filipino: fil-PH, Finnish: Fi-FI, French: fr-FR, German: de-DE,
        /// Greek: El-GR, Haitian: Fr-HT, Hebrew: He-IL, Hindi: Hi-IN, Hungarian:
        /// Hu-HU, Indonesian: Id-ID, Italian: it-IT, Japanese: ja-JP, Kiswahili:
        /// Sw-KE, Korean: Ko-KR, Latvian: Lv-LV, Lithuanian: Lt-LT, Malagasy: Mg-MG,
        /// Malay: Ms-MY, Maltese: Mt-MT, Norwegian: Nb-NO, Persian: Fa-IR, Polish:
        /// Pl-PL, Portuguese: pt-BR, Romanian: Ro-RO, Russian: ru-RU, Samoan: En-WS,
        /// Serbian (Cyrillic): Sr-Cyrl-RS, Serbian (Latin): Sr-Latn-RS, Slovak:
        /// Sk-SK, Slovenian: Sl-SI, Spanish: es-ES, Swedish: Sv-SE, Tamil: Ta-IN,
        /// Thai: Th-TH, Tongan: To-TO, Turkish: Tr-TR, Ukrainian: Uk-UA, Urdu:
        /// Ur-PK, Vietnamese: Vi-VN.
        /// </param>
        /// <param name='setAsSourceLanguage'>
        /// If true the language parameter will be set as source language. Possible
        /// values include: 'true', 'false'
        /// </param>
        /// <param name='callbackUrl'>
        /// A callback url to call with the status once the operation completes
        /// </param>
        /// <param name='vttBody'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> UpdateTranscriptWithHttpMessagesAsync(string location, string accountId, string videoId, string accessToken, string language, string setAsSourceLanguage = "false", string callbackUrl = default(string), object vttBody = default(object), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (videoId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "videoId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            if (language == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "language");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("videoId", videoId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("language", language);
                tracingParameters.Add("setAsSourceLanguage", setAsSourceLanguage);
                tracingParameters.Add("callbackUrl", callbackUrl);
                tracingParameters.Add("vttBody", vttBody);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "UpdateTranscript", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Videos/{videoId}/Index/Transcript").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{videoId}", Uri.EscapeDataString(videoId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (language != null)
            {
                _queryParameters.Add(string.Format("language={0}", Uri.EscapeDataString(language)));
            }
            if (setAsSourceLanguage != null)
            {
                _queryParameters.Add(string.Format("setAsSourceLanguage={0}", Uri.EscapeDataString(setAsSourceLanguage)));
            }
            if (callbackUrl != null)
            {
                _queryParameters.Add(string.Format("callbackUrl={0}", Uri.EscapeDataString(callbackUrl)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(vttBody != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(vttBody, this.SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("text/vtt");
            }
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 204 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Delete Video Source File
        /// </summary>
        /// Deletes only the video source file, while keeping all insights created
        /// from when the video was indexed
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='videoId'>
        /// The video id
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Video or
        /// Account, with Write)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> DeleteVideoSourceFileWithHttpMessagesAsync(string location, string accountId, string videoId, string accessToken, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (videoId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "videoId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("videoId", videoId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "DeleteVideoSourceFile", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Videos/{videoId}/SourceFile").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{videoId}", Uri.EscapeDataString(videoId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("DELETE");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 204 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 404 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Video Source File Download Url
        /// </summary>
        /// Get video source file download url
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;
        /// . Possible values include: 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='videoId'>
        /// The video id
        /// </param>
        /// <param name='accessToken'>
        /// Required for private videos&lt;br&gt;
        /// Access token should match the authorization scope of the call (Account or
        /// Video, with Read)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> GetVideoSourceFileDownloadUrlWithHttpMessagesAsync(string location, string accountId, string videoId, string accessToken = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (videoId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "videoId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("videoId", videoId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetVideoSourceFileDownloadUrl", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Videos/{videoId}/SourceFile/DownloadUrl").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{videoId}", Uri.EscapeDataString(videoId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Video Captions
        /// </summary>
        /// Get video captions
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;
        /// . Possible values include: 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='videoId'>
        /// The video id
        /// </param>
        /// <param name='accessToken'>
        /// Required for private videos&lt;br&gt;
        /// Access token should match the authorization scope of the call (Account or
        /// Video, with Read)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='format'>
        /// The captions format (vtt, ttml, srt). Possible values include: 'vtt',
        /// 'ttml', 'srt'
        /// </param>
        /// <param name='language'>
        /// The language of the captions.
        /// Supported languages: Afrikaans: Af-ZA, Arabic: ar-EG, Bangla: Bn-BD,
        /// Bosnian: Bs-Latn, Bulgarian: Bg-BG, Catalan: Ca-ES, Chinese (Simplified):
        /// zh-Hans, Chinese (Traditional): Zh-Hant, Croatian: Hr-HR, Czech: Cs-CZ,
        /// Danish: Da-DK, Dutch: Nl-NL, English: en-US, Estonian: Et-EE, Fijian:
        /// En-FJ, Filipino: fil-PH, Finnish: Fi-FI, French: fr-FR, German: de-DE,
        /// Greek: El-GR, Haitian: Fr-HT, Hebrew: He-IL, Hindi: Hi-IN, Hungarian:
        /// Hu-HU, Indonesian: Id-ID, Italian: it-IT, Japanese: ja-JP, Kiswahili:
        /// Sw-KE, Korean: Ko-KR, Latvian: Lv-LV, Lithuanian: Lt-LT, Malagasy: Mg-MG,
        /// Malay: Ms-MY, Maltese: Mt-MT, Norwegian: Nb-NO, Persian: Fa-IR, Polish:
        /// Pl-PL, Portuguese: pt-BR, Romanian: Ro-RO, Russian: ru-RU, Samoan: En-WS,
        /// Serbian (Cyrillic): Sr-Cyrl-RS, Serbian (Latin): Sr-Latn-RS, Slovak:
        /// Sk-SK, Slovenian: Sl-SI, Spanish: es-ES, Swedish: Sv-SE, Tamil: Ta-IN,
        /// Thai: Th-TH, Tongan: To-TO, Turkish: Tr-TR, Ukrainian: Uk-UA, Urdu:
        /// Ur-PK, Vietnamese: Vi-VN. Possible values include: 'English', 'Spanish',
        /// 'Russian', 'Japanese', 'German', 'French', 'Portuguese', 'Italian',
        /// 'Chinese', 'Filipino', 'Arabic', 'ar-EG', 'en-US', 'es-ES', 'fr-FR',
        /// 'de-DE', 'it-IT', 'ja-JP', 'pt-BR', 'ru-RU', 'zh-Hans', 'fil-PH',
        /// 'Af-ZA', 'Bn-BD', 'Bs-Latn', 'Bg-BG', 'Ca-ES', 'Hr-HR', 'Cs-CZ', 'Da-DK',
        /// 'Nl-NL', 'En-FJ', 'En-GB', 'En-WS', 'Es-MX', 'Et-EE', 'Fi-FI', 'El-GR',
        /// 'Fr-HT', 'He-IL', 'Hi-IN', 'Hu-HU', 'Id-ID', 'Sw-KE', 'Ko-KR', 'Lv-LV',
        /// 'Lt-LT', 'Mg-MG', 'Ms-MY', 'Mt-MT', 'Nb-NO', 'Fa-IR', 'Pl-PL', 'Ro-RO',
        /// 'Sr-Cyrl-RS', 'Sr-Latn-RS', 'Sk-SK', 'Sl-SI', 'Sv-SE', 'Ta-IN', 'Th-TH',
        /// 'To-TO', 'Tr-TR', 'Uk-UA', 'Ur-PK', 'Vi-VN', 'Zh-Hant'
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> GetVideoCaptionsWithHttpMessagesAsync(string location, string accountId, string videoId, string accessToken = default(string), string format = "vtt", string language = "English", Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (videoId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "videoId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("videoId", videoId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("format", format);
                tracingParameters.Add("language", language);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetVideoCaptions", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Videos/{videoId}/Captions").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{videoId}", Uri.EscapeDataString(videoId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (format != null)
            {
                _queryParameters.Add(string.Format("format={0}", Uri.EscapeDataString(format)));
            }
            if (language != null)
            {
                _queryParameters.Add(string.Format("language={0}", Uri.EscapeDataString(language)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Video Id by External Id
        /// </summary>
        /// Get video id by external id
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='externalId'>
        /// The external id
        /// </param>
        /// <param name='accessToken'>
        /// Required for private videos&lt;br&gt;
        /// Access token should match the authorization scope of the call (Account
        /// with Read)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> GetVideoIdByExternalIdWithHttpMessagesAsync(string location, string accountId, string externalId, string accessToken = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (externalId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "externalId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("externalId", externalId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetVideoIdByExternalId", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Videos/GetIdByExternalId").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            List<string> _queryParameters = new List<string>();
            if (externalId != null)
            {
                _queryParameters.Add(string.Format("externalId={0}", Uri.EscapeDataString(externalId)));
            }
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 404 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Thumbnail
        /// </summary>
        /// Get thumbnail of a video
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='videoId'>
        /// The video id
        /// </param>
        /// <param name='thumbnailId'>
        /// The thumbnail id
        /// </param>
        /// <param name='accessToken'>
        /// Required for private videos&lt;br&gt;
        /// Access token should match the authorization scope of the call (Account or
        /// Video, with Read)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='format'>
        /// The thumbnail format. Possible values include: 'Jpeg', 'Base64'
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> GetThumbnailWithHttpMessagesAsync(string location, string accountId, string videoId, string thumbnailId, string accessToken = default(string), string format = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (videoId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "videoId");
            }
            if (thumbnailId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "thumbnailId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("videoId", videoId);
                tracingParameters.Add("thumbnailId", thumbnailId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("format", format);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetThumbnail", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Videos/{videoId}/Thumbnails/{thumbnailId}").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{videoId}", Uri.EscapeDataString(videoId));
            _url = _url.Replace("{thumbnailId}", Uri.EscapeDataString(thumbnailId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (format != null)
            {
                _queryParameters.Add(string.Format("format={0}", Uri.EscapeDataString(format)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 404 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Insights Widget
        /// </summary>
        /// Get insights widget
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='videoId'>
        /// The video id
        /// </param>
        /// <param name='accessToken'>
        /// A video access token with permissions that correspond to allowEdit
        /// parameter
        /// </param>
        /// <param name='widgetType'>
        /// The type of widgets to include. Possible values include: 'People',
        /// 'Sentiments', 'Keywords', 'Search'
        /// </param>
        /// <param name='allowEdit'>
        /// Whether the widget allows editing of the insights. Possible values
        /// include: 'true', 'false'
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> GetInsightsWidgetWithHttpMessagesAsync(string location, string accountId, string videoId, string accessToken = default(string), string widgetType = default(string), string allowEdit = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (videoId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "videoId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("videoId", videoId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("widgetType", widgetType);
                tracingParameters.Add("allowEdit", allowEdit);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetInsightsWidget", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Videos/{videoId}/InsightsWidget").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{videoId}", Uri.EscapeDataString(videoId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (widgetType != null)
            {
                _queryParameters.Add(string.Format("widgetType={0}", Uri.EscapeDataString(widgetType)));
            }
            if (allowEdit != null)
            {
                _queryParameters.Add(string.Format("allowEdit={0}", Uri.EscapeDataString(allowEdit)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Player Widget
        /// </summary>
        /// Get player widget
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='videoId'>
        /// The video id
        /// </param>
        /// <param name='accessToken'>
        /// A video access token with read permissions
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> GetPlayerWidgetWithHttpMessagesAsync(string location, string accountId, string videoId, string accessToken = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (videoId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "videoId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("videoId", videoId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetPlayerWidget", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Videos/{videoId}/PlayerWidget").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{videoId}", Uri.EscapeDataString(videoId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Brands
        /// </summary>
        /// Gets all custom brands per the account and Bing brands activation state
        /// (whether Bing brands should be used when applying the model)
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account
        /// Read)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> GetBrandsWithHttpMessagesAsync(string location, string accountId, string accessToken, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetBrands", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/Brands").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Create Brand
        /// </summary>
        /// Creates a new custom brand for the specified account
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='body'>
        /// A create brand request
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> CreateBrandWithHttpMessagesAsync(string location, string accountId, string accessToken, object body = default(object), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("body", body);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "CreateBrand", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/Brands").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, this.SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 201 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Brand
        /// </summary>
        /// Get specific brand
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='id'>
        /// The brand id
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account
        /// Read)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> GetBrandWithHttpMessagesAsync(string location, string accountId, int id, string accessToken, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("id", id);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetBrand", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/Brands/{id}").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{id}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(id, this.SerializationSettings).Trim('"')));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 404 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Update Brand
        /// </summary>
        /// Update Brand
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;
        /// . Possible values include: 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='id'>
        /// The brand id
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account
        /// with Write)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='body'>
        /// The updated brand
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> UpdateBrandWithHttpMessagesAsync(string location, string accountId, int id, string accessToken, object body = default(object), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("id", id);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("body", body);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "UpdateBrand", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/Brands/{id}").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{id}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(id, this.SerializationSettings).Trim('"')));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, this.SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Delete Brand
        /// </summary>
        /// Removes a brand in the specified account
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='id'>
        /// The brand id
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account and
        /// Write)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> DeleteBrandWithHttpMessagesAsync(string location, string accountId, int id, string accessToken, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("id", id);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "DeleteBrand", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/Brands/{id}").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{id}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(id, this.SerializationSettings).Trim('"')));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("DELETE");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 204 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 404 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Brands Model Settings
        /// </summary>
        /// Gets the model settings which determines which brands to use
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account
        /// Read)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> GetBrandsModelSettingsWithHttpMessagesAsync(string location, string accountId, string accessToken, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetBrandsModelSettings", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/BrandsModelSettings").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Update Brands Model Settings
        /// </summary>
        /// Update the brand model settings
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;
        /// . Possible values include: 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account
        /// with Write)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='body'>
        /// The updated brand model settings
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> UpdateBrandsModelSettingsWithHttpMessagesAsync(string location, string accountId, string accessToken, object body = default(object), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("body", body);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "UpdateBrandsModelSettings", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/BrandsModelSettings").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(body != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(body, this.SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Create Language Model
        /// </summary>
        /// Creates a language model.
        /// There are two ways to upload files in the body using form-data.
        /// 1. Key will be the file name and value will be the file.
        /// 2. Key will be the file name and value will be a URL to txt file.
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account and
        /// Write)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='modelName'>
        /// Model name
        /// </param>
        /// <param name='language'>
        /// Model language. Possible values include: 'en-US', 'ar-EG', 'de-DE',
        /// 'es-ES', 'fr-FR', 'hi-HI', 'it-IT', 'ja-JP', 'pt-BR', 'ru-RU', 'zh-CN'
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> CreateLanguageModelWithHttpMessagesAsync(string location, string accountId, string accessToken, string modelName, string language, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            if (modelName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "modelName");
            }
            if (language == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "language");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("modelName", modelName);
                tracingParameters.Add("language", language);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "CreateLanguageModel", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/Language").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (modelName != null)
            {
                _queryParameters.Add(string.Format("modelName={0}", Uri.EscapeDataString(modelName)));
            }
            if (language != null)
            {
                _queryParameters.Add(string.Format("language={0}", Uri.EscapeDataString(language)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Language Models
        /// </summary>
        /// Get language models
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account
        /// Read)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> FiveaeFivebFourNineSevenNineeSixecbdThreeZerofaaSixfSevenFiveWithHttpMessagesAsync(string location, string accountId, string accessToken, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "FiveaeFivebFourNineSevenNineeSixecbdThreeZerofaaSixfSevenFive", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/Language").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Update Language Model
        /// </summary>
        /// Updates a language model.
        /// 
        /// There are two ways to upload files in the body using form-data.
        /// 1. Key will be the file name and value will be the file.
        /// 2. Key will be the file name and value will be a URL to txt file.
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;
        /// . Possible values include: 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='modelId'>
        /// Model id
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account
        /// with Write)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='modelName'>
        /// Model name
        /// </param>
        /// <param name='enable'>
        /// Enable / Disable all files under the model. Possible values include:
        /// 'true', 'false'
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> FiveaeFivebThreeceEightFivefFourSixEightFourTwoFourZerobdbSevenEightfWithHttpMessagesAsync(string location, string accountId, string modelId, string accessToken, string modelName = default(string), string enable = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (modelId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "modelId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("modelId", modelId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("modelName", modelName);
                tracingParameters.Add("enable", enable);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "FiveaeFivebThreeceEightFivefFourSixEightFourTwoFourZerobdbSevenEightf", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/Language/{modelId}").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{modelId}", Uri.EscapeDataString(modelId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (modelName != null)
            {
                _queryParameters.Add(string.Format("modelName={0}", Uri.EscapeDataString(modelName)));
            }
            if (enable != null)
            {
                _queryParameters.Add(string.Format("enable={0}", Uri.EscapeDataString(enable)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Language Model
        /// </summary>
        /// Get language model
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='modelId'>
        /// Model id
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account
        /// Read)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> FiveaeFivebFourfcbdNinebFourThreeSevendTwoSevendFiveThreefOneSixWithHttpMessagesAsync(string location, string accountId, string modelId, string accessToken, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (modelId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "modelId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("modelId", modelId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "FiveaeFivebFourfcbdNinebFourThreeSevendTwoSevendFiveThreefOneSix", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/Language/{modelId}").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{modelId}", Uri.EscapeDataString(modelId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Delete Language Model
        /// </summary>
        /// Delete language model
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='modelId'>
        /// Model id
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account and
        /// Write)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> FiveaeFivebaFiveThreeSevenEightTwoSixZeroSixeNineOnefSixFivebeNinedWithHttpMessagesAsync(string location, string accountId, string modelId, string accessToken, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (modelId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "modelId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("modelId", modelId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "FiveaeFivebaFiveThreeSevenEightTwoSixZeroSixeNineOnefSixFivebeNined", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/Language/{modelId}").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{modelId}", Uri.EscapeDataString(modelId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("DELETE");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 204 && (int)_statusCode != 400 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Delete Language Model file
        /// </summary>
        /// Delete language model file
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='modelId'>
        /// Model id
        /// </param>
        /// <param name='fileId'>
        /// File id
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account and
        /// Write)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> FiveaeFivebFiveSevenbFivedeFiveOneeSixFoureeFiveTwoTwoFourTwoeWithHttpMessagesAsync(string location, string accountId, string modelId, string fileId, string accessToken, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (modelId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "modelId");
            }
            if (fileId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "fileId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("modelId", modelId);
                tracingParameters.Add("fileId", fileId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "FiveaeFivebFiveSevenbFivedeFiveOneeSixFoureeFiveTwoTwoFourTwoe", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/Language/{modelId}/Files/{fileId}").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{modelId}", Uri.EscapeDataString(modelId));
            _url = _url.Replace("{fileId}", Uri.EscapeDataString(fileId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("DELETE");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 204 && (int)_statusCode != 400 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Update Language Model file
        /// </summary>
        /// Update a language model file name or state
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;
        /// . Possible values include: 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='modelId'>
        /// Model id
        /// </param>
        /// <param name='fileId'>
        /// File id
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account
        /// with Write)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='fileName'>
        /// File name
        /// </param>
        /// <param name='enable'>
        /// Enable. Possible values include: 'true', 'false'
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> FiveaeFivebSixZeroFiveFourSevenfThreeThreecOnecTwobTwodOneThreeSevenFiveWithHttpMessagesAsync(string location, string accountId, string modelId, string fileId, string accessToken, string fileName = default(string), string enable = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (modelId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "modelId");
            }
            if (fileId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "fileId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("modelId", modelId);
                tracingParameters.Add("fileId", fileId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("fileName", fileName);
                tracingParameters.Add("enable", enable);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "FiveaeFivebSixZeroFiveFourSevenfThreeThreecOnecTwobTwodOneThreeSevenFive", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/Language/{modelId}/Files/{fileId}").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{modelId}", Uri.EscapeDataString(modelId));
            _url = _url.Replace("{fileId}", Uri.EscapeDataString(fileId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (fileName != null)
            {
                _queryParameters.Add(string.Format("fileName={0}", Uri.EscapeDataString(fileName)));
            }
            if (enable != null)
            {
                _queryParameters.Add(string.Format("enable={0}", Uri.EscapeDataString(enable)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Language Model file data
        /// </summary>
        /// Get language model file data and metadata
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='modelId'>
        /// Model id
        /// </param>
        /// <param name='fileId'>
        /// File id
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account
        /// Read)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> FiveaeFivebSevenThreefNineeSixFourOneSixdSevenaNineNineSixFivebFourTwoWithHttpMessagesAsync(string location, string accountId, string modelId, string fileId, string accessToken, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (modelId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "modelId");
            }
            if (fileId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "fileId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("modelId", modelId);
                tracingParameters.Add("fileId", fileId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "FiveaeFivebSevenThreefNineeSixFourOneSixdSevenaNineNineSixFivebFourTwo", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/Language/{modelId}/Files/{fileId}").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{modelId}", Uri.EscapeDataString(modelId));
            _url = _url.Replace("{fileId}", Uri.EscapeDataString(fileId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Download Language Model file content
        /// </summary>
        /// Downlaod language model file content
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='modelId'>
        /// Model id
        /// </param>
        /// <param name='fileId'>
        /// File id
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account
        /// Read)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> FiveaeFivebNineNineeFiveTwoTwocbFourSevenbdNineSixSevenNineOneTwoTwoWithHttpMessagesAsync(string location, string accountId, string modelId, string fileId, string accessToken, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (modelId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "modelId");
            }
            if (fileId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "fileId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("modelId", modelId);
                tracingParameters.Add("fileId", fileId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "FiveaeFivebNineNineeFiveTwoTwocbFourSevenbdNineSixSevenNineOneTwoTwo", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/Language/{modelId}/Files/{fileId}/download").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{modelId}", Uri.EscapeDataString(modelId));
            _url = _url.Replace("{fileId}", Uri.EscapeDataString(fileId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Train Language Model
        /// </summary>
        /// Train the language model based on the enabled files
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;
        /// . Possible values include: 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='modelId'>
        /// Model id
        /// </param>
        /// <param name='accessToken'>
        /// Access token should match the authorization scope of the call (Account,
        /// with Write)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> FiveaeFivebacThreecfSevenSixOneSevenSevenNineaSixcTwoabTwoSevenWithHttpMessagesAsync(string location, string accountId, string modelId, string accessToken, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (modelId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "modelId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("modelId", modelId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "FiveaeFivebacThreecfSevenSixOneSevenSevenNineaSixcTwoabTwoSeven", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/Language/{modelId}/Train").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{modelId}", Uri.EscapeDataString(modelId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Video Artifact Download Url
        /// </summary>
        /// Get video artifact download url
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include:
        /// 'northeurope', 'westus2', 'eastasia', 'trial'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='videoId'>
        /// The video id
        /// </param>
        /// <param name='type'>
        /// The artifact type to get. Possible values include: 'Ocr', 'Faces',
        /// 'FacesThumbnails', 'VisualContentModeration', 'KeyframesThumbnails',
        /// 'LanguageDetection', 'Metadata', 'Emotions', 'TextualContentModeration'
        /// </param>
        /// <param name='accessToken'>
        /// Required for private videos&lt;br&gt;
        /// Access token should match the authorization scope of the call (Account or
        /// Video, with Read)&lt;br&gt;
        /// Note that Access tokens expire within 1 hour&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accesstoken
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> GetVideoArtifactDownloadUrlWithHttpMessagesAsync(string location, string accountId, string videoId, string type, string accessToken = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (videoId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "videoId");
            }
            if (type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "type");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("videoId", videoId);
                tracingParameters.Add("type", type);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetVideoArtifactDownloadUrl", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Videos/{videoId}/ArtifactUrl").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{videoId}", Uri.EscapeDataString(videoId));
            List<string> _queryParameters = new List<string>();
            if (type != null)
            {
                _queryParameters.Add(string.Format("type={0}", Uri.EscapeDataString(type)));
            }
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Create Person Model
        /// </summary>
        /// Creates a new person model in the specified account.
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include: 'trial',
        /// 'northeurope', 'eastasia', 'westus2'
        /// </param>
        /// <param name='accountId'>
        /// Format - uuid. Account ID is a globally unique identifier (GUID) for the
        /// account.&lt;br&gt; See more details &lt;a
        /// href=https://aka.ms/vi-docs-accountid target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='name'>
        /// The person model name.
        /// </param>
        /// <param name='accessToken'>
        /// An account access token with write permissions.&lt;br&gt;Note that Access
        /// tokens expire within 1 hour.&lt;br&gt;See more details &lt;a
        /// href=https://aka.ms/vi-docs-accesstoken target="_blank"&gt;here&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> CreatePersonModelWithHttpMessagesAsync(string location, string accountId, string name, string accessToken, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "name");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("name", name);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "CreatePersonModel", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/PersonModels").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            List<string> _queryParameters = new List<string>();
            if (name != null)
            {
                _queryParameters.Add(string.Format("name={0}", Uri.EscapeDataString(name)));
            }
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 201 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get Person Models
        /// </summary>
        /// Gets all person models in the account.
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-location
        /// target="_blank"&gt;here&lt;/a&gt;. Possible values include: 'trial',
        /// 'northeurope', 'eastasia', 'westus2'
        /// </param>
        /// <param name='accountId'>
        /// Format - uuid. Account ID is a globally unique identifier (GUID) for the
        /// account.&lt;br&gt; See more details &lt;a
        /// href=https://aka.ms/vi-docs-accountid target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='accessToken'>
        /// An account access token with read permissions.&lt;br&gt;Note that Access
        /// tokens expire within 1 hour.&lt;br&gt;See more details &lt;a
        /// href=https://aka.ms/vi-docs-accesstoken target="_blank"&gt;here&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> GetPersonModelsWithHttpMessagesAsync(string location, string accountId, string accessToken, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetPersonModels", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/PersonModels").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Delete Person Model
        /// </summary>
        /// Deletes the given person model.
        /// <param name='location'>
        /// Location indicates the Azure region to which the call should be
        /// routed&lt;br&gt;See more details &lt;a
        /// href=https://aka.ms/vi-docs-location target="_blank"&gt;here&lt;/a&gt;.
        /// Possible values include: 'trial', 'northeurope', 'eastasia', 'westus2'
        /// </param>
        /// <param name='accountId'>
        /// Account ID is a globally unique identifier (GUID) for the account&lt;br&gt;
        /// See more details &lt;a href=https://aka.ms/vi-docs-accountid
        /// target="_blank"&gt;here&lt;/a&gt;
        /// </param>
        /// <param name='id'>
        /// The person model id
        /// </param>
        /// <param name='accessToken'>
        /// An account access token with write permissions.&lt;br&gt;Note that Access
        /// tokens expire within 1 hour.&lt;br&gt;See more details &lt;a
        /// href=https://aka.ms/vi-docs-accesstoken target="_blank"&gt;here&lt;/a&gt;.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> DeletePersonModelWithHttpMessagesAsync(string location, string accountId, string id, string accessToken, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "location");
            }
            if (accountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accountId");
            }
            if (id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "id");
            }
            if (accessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "accessToken");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("location", location);
                tracingParameters.Add("accountId", accountId);
                tracingParameters.Add("id", id);
                tracingParameters.Add("accessToken", accessToken);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "DeletePersonModel", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "{location}/Accounts/{accountId}/Customization/PersonModels/{id}").ToString();
            _url = _url.Replace("{location}", Uri.EscapeDataString(location));
            _url = _url.Replace("{accountId}", Uri.EscapeDataString(accountId));
            _url = _url.Replace("{id}", Uri.EscapeDataString(id));
            List<string> _queryParameters = new List<string>();
            if (accessToken != null)
            {
                _queryParameters.Add(string.Format("accessToken={0}", Uri.EscapeDataString(accessToken)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("DELETE");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 204 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 404 && (int)_statusCode != 500)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

    }
}
