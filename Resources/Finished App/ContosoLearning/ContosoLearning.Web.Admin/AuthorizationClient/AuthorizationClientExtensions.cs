// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ContosoLearning.Web.Admin.VideoIndexer.Authorization
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;

    /// <summary>
    /// Extension methods for AuthorizationClient.
    /// </summary>
    public static partial class AuthorizationClientExtensions
    {
            /// <summary>
            /// Get Video Access Token
            /// </summary>
            /// Gets a video access token
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location. Possible values include: 'trial', 'westus2', 'northeurope',
            /// 'eastasia'
            /// </param>
            /// <param name='accountId'>
            /// The account id
            /// </param>
            /// <param name='videoId'>
            /// The video id
            /// </param>
            /// <param name='allowEdit'>
            /// Determines whether the token has write permissions
            /// </param>
            public static void GetVideoAccessToken(this IAuthorizationClient operations, string location, string accountId, string videoId, bool? allowEdit = default(bool?))
            {
                Task.Factory.StartNew(s => ((IAuthorizationClient)s).GetVideoAccessTokenAsync(location, accountId, videoId, allowEdit), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Video Access Token
            /// </summary>
            /// Gets a video access token
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location. Possible values include: 'trial', 'westus2', 'northeurope',
            /// 'eastasia'
            /// </param>
            /// <param name='accountId'>
            /// The account id
            /// </param>
            /// <param name='videoId'>
            /// The video id
            /// </param>
            /// <param name='allowEdit'>
            /// Determines whether the token has write permissions
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetVideoAccessTokenAsync(this IAuthorizationClient operations, string location, string accountId, string videoId, bool? allowEdit = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetVideoAccessTokenWithHttpMessagesAsync(location, accountId, videoId, allowEdit, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get User Access Token
            /// </summary>
            /// Gets a user access token
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location. Possible values include: 'trial', 'westus2', 'northeurope',
            /// 'eastasia'
            /// </param>
            /// <param name='allowEdit'>
            /// Determines whether the token has write permissions
            /// </param>
            public static void GetUserAccessToken(this IAuthorizationClient operations, string location, bool? allowEdit = default(bool?))
            {
                Task.Factory.StartNew(s => ((IAuthorizationClient)s).GetUserAccessTokenAsync(location, allowEdit), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get User Access Token
            /// </summary>
            /// Gets a user access token
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location. Possible values include: 'trial', 'westus2', 'northeurope',
            /// 'eastasia'
            /// </param>
            /// <param name='allowEdit'>
            /// Determines whether the token has write permissions
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetUserAccessTokenAsync(this IAuthorizationClient operations, string location, bool? allowEdit = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetUserAccessTokenWithHttpMessagesAsync(location, allowEdit, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get Account Access Token
            /// </summary>
            /// Gets an account access token
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location. Possible values include: 'trial', 'westus2', 'northeurope',
            /// 'eastasia'
            /// </param>
            /// <param name='accountId'>
            /// The account id
            /// </param>
            /// <param name='allowEdit'>
            /// Determines whether the token has write permissions
            /// </param>
            public static void GetAccountAccessToken(this IAuthorizationClient operations, string location, string accountId, bool? allowEdit = default(bool?))
            {
                Task.Factory.StartNew(s => ((IAuthorizationClient)s).GetAccountAccessTokenAsync(location, accountId, allowEdit), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Account Access Token
            /// </summary>
            /// Gets an account access token
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location. Possible values include: 'trial', 'westus2', 'northeurope',
            /// 'eastasia'
            /// </param>
            /// <param name='accountId'>
            /// The account id
            /// </param>
            /// <param name='allowEdit'>
            /// Determines whether the token has write permissions
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAccountAccessTokenAsync(this IAuthorizationClient operations, string location, string accountId, bool? allowEdit = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetAccountAccessTokenWithHttpMessagesAsync(location, accountId, allowEdit, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get Accounts
            /// </summary>
            /// Get Accounts
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location. Possible values include: 'northeurope', 'westus2', 'eastasia',
            /// 'trial'
            /// </param>
            /// <param name='generateAccessTokens'>
            /// Whether to generate an access token for each account. Possible values
            /// include: 'true', 'false'
            /// </param>
            /// <param name='allowEdit'>
            /// Whether the tokens have write permissions. Possible values include:
            /// 'true', 'false'
            /// </param>
            public static void GetAccounts(this IAuthorizationClient operations, string location, string generateAccessTokens = default(string), string allowEdit = default(string))
            {
                Task.Factory.StartNew(s => ((IAuthorizationClient)s).GetAccountsAsync(location, generateAccessTokens, allowEdit), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Accounts
            /// </summary>
            /// Get Accounts
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location. Possible values include: 'northeurope', 'westus2', 'eastasia',
            /// 'trial'
            /// </param>
            /// <param name='generateAccessTokens'>
            /// Whether to generate an access token for each account. Possible values
            /// include: 'true', 'false'
            /// </param>
            /// <param name='allowEdit'>
            /// Whether the tokens have write permissions. Possible values include:
            /// 'true', 'false'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAccountsAsync(this IAuthorizationClient operations, string location, string generateAccessTokens = default(string), string allowEdit = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetAccountsWithHttpMessagesAsync(location, generateAccessTokens, allowEdit, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
